-- @path statechart=/CapiTrain/EMF/statechart.ecore
-- @path petrinet=/CapiTrain/EMF/petrinet.ecore

module Petrinet2Statechart;

create schartOut: statechart, pnetOut: petrinet refining schartInput : statechart, pnetInput: petrinet;

rule Petrinet2Statechart {
	from 
		b1: statechart!Basic
	to
		b2: statechart!Basic (
			rnext <- b1.getRNextHyperEdges(),
			next <- b1.getNextHyperEdges()
		)
}

helper context statechart!Basic def: getNextHyperEdges(): Sequence(statechart!HyperEdge) =
	let place: petrinet!Place = petrinet!Place -> allInstances() -> select(p | p.name = self.name).first() in
		if place.oclIsUndefined() = false then
			place.postt -> collect(t |
				statechart!HyperEdge -> allInstances() ->select(h | h.name = t.name).first()
			)
		else
			OclUndefined
		endif
;

helper context statechart!Basic def: getRNextHyperEdges(): Sequence(statechart!HyperEdge) =
	let place: petrinet!Place = petrinet!Place -> allInstances() -> select(p | p.name = self.name).first() in
		if place.oclIsUndefined() = false then
			place.pret -> collect(t |
				statechart!HyperEdge -> allInstances() ->select(h | h.name = t.name).first()
			)
		else
			OclUndefined
		endif
;
