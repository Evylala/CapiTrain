-- @path statechart=/CapiTrain/EMF/statechart.ecore
-- @path petrinet=/CapiTrain/EMF/petrinet.ecore

module Petrinet2Statechart;

create OUT: statechart refining schartIN : statechart, input: petrinet;

rule Petrinet2Statechart {
	from 
		s: statechart!Basic,
		p: petrinet!Place
	to
		b: statechart!Basic (
			rnext <- if p.pret.isEmpty()
				then 
					OclUndefined
				else 
					p.pret -> collect(t | 
						if thisModule.isPlace(t) then
							thisModule.getBasic(t.name)
						else
							thisModule.getHyperEdge(t.name)
						endif
					)
				endif,
			next <- if p.postt.isEmpty()
				then 
					OclUndefined
				else 
					p.postt -> collect(t | 
						if thisModule.isPlace(t) then
							thisModule.getBasic(t.name)
						else
							thisModule.getHyperEdge(t.name)
						endif
						)
				endif
		)
}

helper def: isPlace(s: statechart!State): Boolean =
	s.oclIsTypeOf(statechart!Place)
;

helper def: isTransaction(s: statechart!State): Boolean =
	s.oclIsTypeOf(statechart!Transaction)
;

helper def: getBasic(n: String): statechart!Basic =
	let allBasics: Sequence(statechart!Basic) =
		statechart!Basic.allInstances()->asSequence() in
		if allBasics->exists(b | b.name = n) then
			allBasics->select(b | b.name = n).first()
		else
			OclUndefined
		endif
;

helper def: getHyperEdge(n: String): statechart!HyperEdge =
	let allHyperEdges: Sequence(statechart!HyperEdge) =
		statechart!HyperEdge.allInstances()->asSequence() in
		if allHyperEdges->exists(h | h.name = n) then
			allHyperEdges->select(h | h.name = n).first()
		else
			OclUndefined
		endif
;
