-- @path statechart=/CapiTrain/EMF/statechart.ecore
-- @path petrinet=/CapiTrain/EMF/petrinet.ecore

module Petrinet2Statechart;

create OUT: statechart from input: petrinet;

-- RULES
rule Pnet2Statechart {
	from
		pnet: petrinet!Net
	to
		schart: statechart!Statechart (
			topState <- t	
		),
		t: statechart!AND (
			name <- 'top',
			contains <- pnet.places -> collect(p | thisModule.Place2OR(p))
		)
	do {
		thisModule.firstBasic.rework();
	}
}

-- LAZY RULES
lazy rule Place2OR {
	from
		p: petrinet!Place
	to
		o: statechart!OR (
			name <- '',
			contains <- Set{b}
		),
		b: statechart!Basic (
			name <- p.name,
			rcontains <- o,
			rnext <- if p.pret.size() < 1
				then 
					thisModule.firstBasic = b
				else 
					p.pret -> collect(h | thisModule.getNextHyperEdges(h, b))
				endif,
			next <- if p.pret.size() < 1
				then 
					OclUndefined
				else 
					p.postt -> collect(h | thisModule.getRNextHyperEdges(h, b))
				endif
		)
}

lazy rule Transition2NextHyperEdge {
	from 
		t: petrinet!Transition,
		b: statechart!Basic
	to
		o: statechart!OR (
			name <- '',
			contains <- Set{h}
		),
		h: statechart!HyperEdge (
			name <- t.name,
			rcontains <- o,
			next <- Set{b}
		)
}

lazy rule Transition2RNextHyperEdge {
	from 
		t: petrinet!Transition,
		b: statechart!Basic
	to
		o: statechart!OR (
			name <- '',
			contains <- Set{h}
		),
		h: statechart!HyperEdge (
			name <- t.name,
			rcontains <- o,
			rnext <- Set{b}
		)
}

-- HELPERS
helper def: getNextHyperEdges(t: petrinet!Transition, b: statechart!Basic): Set(statechart!HyperEdge) =
	let ret: statechart!HyperEdge = OclUndefined
	in
		if thisModule.hyperEdgeExists(t.name)
		then 
			thisModule.getHyperEdge(t.name).next.append(b)
		else thisModule.Transition2NextHyperEdge(t, b)
		endif
	;
helper def: getRNextHyperEdges(t: petrinet!Transition, b: statechart!Basic): Set(statechart!HyperEdge) =
	let ret: statechart!HyperEdge = OclUndefined
	in
		if thisModule.hyperEdgeExists(t.name)
		then 
			thisModule.getHyperEdge(t.name).rnext.append(b)
		else thisModule.Transition2RNextHyperEdge(t, b)
		endif
	;

helper def: getBasic(n: String): statechart!Basic =
	let allBasics: Sequence(statechart!Basic) =
		statechart!Basic.allInstances()->asSequence() in
	allBasics->iterate(b; name : String = n |
		if b.name = name
		then
			b
		else
			OclUndefined
		endif
	);

helper def: getHyperEdge(n: String): statechart!HyperEdge =
	let allHyperEdges: Sequence(statechart!HyperEdge) =
		statechart!HyperEdge.allInstances()->asSequence() in
	allHyperEdges->iterate(h; name : String = n |
		if h.name = name
		then
			h
		else
			OclUndefined
		endif
	);


helper def: hyperEdgeExists(n: String): Boolean =
	let allHyperEdges: Sequence(statechart!HyperEdge) =
		statechart!HyperEdge.allInstances()->asSequence() in
	allHyperEdges->iterate(h; name : String = n |
		if h.name = name
		then
			true
		else
			false
		endif
	);

helper context statechart!Basic def: rework(): OclAny =
	OclUndefined
	;

helper context statechart!HyperEdge def: toOr(): OclAny =
	OclUndefined
	;

helper context statechart!HyperEdge def: toAnd(): OclAny =
	OclUndefined
	;
helper def: firstBasic: statechart!Basic = OclUndefined;

-- OLD
lazy rule Transition2State {
	from
		t:petrinet!Transition 
	to
		h: statechart!HyperEdge (
			name <- t.name,
			rcontains <- if t.prep = 1
					then o
					else a
				endif
		),
		o: statechart!OR (
			
		),
		a: statechart!AND (
		)
}


--rule Pnet2Statechart {
--	from
--		pnet: petrinet!Net
--	to
--		schart: statechart!Statechart (
--			topState <- t	
--		),
--		t: statechart!AND (
--			name <- 'top',
--			contains <- pnet.places -> collect(p | thisModule.Place2OR(p))
--		),
--		h: distinct statechart!HyperEdge foreach(transition in pnet.transitions) (
--			name <- transition.name,
--			rcontains <- thisModule.Place2And(transition.prep)
--		)
--}

lazy rule Place2And {
	from 
		p: petrinet!Place
	to
		a: statechart!AND (
			name <- 'AND transition'
		)
}


lazy rule Transition2HyperEdgeAnd {
	from 
		t: petrinet!Transition (
			t.prep.size() > 1 and t.isTheSame(t.prep, t.prep.first().name)
		)
	to
		h: statechart!HyperEdge (
			name <- 'and',
			rcontains <- a
--			next <- t.prep,
--			rnext <- t.postp
		),
		b: statechart!Basic (
--			name <- t.prep.first().name,
--			rcontains <- a
		),
		rb: statechart!Basic (
--			name <- t.postp.first().name,
--			rcontains <- a
		),
		a: statechart!AND (
			name <- '',
			contains <- Set{h,b,rb}
		)
}

lazy rule Transition2HyperEdgeOr {
	from 
		t: petrinet!Transition (
			t.prep.size() > 1 and t.isTheSame(t.prep)
		)
	to
		h: statechart!HyperEdge (
			name <- 'and',
			rcontains <- Set {}
		)
}


helper context petrinet!Transition def : isTheSame (tList: Sequence(petrinet!Place), firstName: String) : Boolean =
	let ret: Boolean = true
	in tList->asSequence()->iterate(t; f : petrinet!Place = tList.asSequence()->first() |
		if t.name = firstName
		then
			true
		else
			false
		endif
	);

--
--helper context petrinet!Net def : getAllPlaces () : OrderedSet(petrinet!Place) =
--	self.places->iterate( place ; elements : OrderedSet(petrinet!Place) = 
--		OrderedSet{} | elements.append(place)
--		)
--	;

--helper context statechart!OR def : getBasic (n: String) : statechart!Basic =
--	;
