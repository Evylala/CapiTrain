module Petrinet2Statechart;

create OUT: statechart from input: petrinet;

rule Pnet2Statechart {
	from
		pnet: petrinet!Net
	to
		schart: statechart!Statechart (
			topState <- t	
		),
		t: statechart!AND (
			name <- 'top',
			contains <- Set{o}
		),
		o: distinct statechart!OR foreach(place in pnet.places) (
			name <- '',
			contains <- thisModule.Place2Basic(place)
		),
		h: distinct statechart!HyperEdge foreach(transition in pnet.transitions) (
			name <- transition.name
		)
}

lazy rule Place2Basic {
	from
		p: petrinet!Place
	to 
		b: statechart!Basic (
			name <- p.name
		)
}


--
--helper context petrinet!Net def : getAllPlaces () : OrderedSet(petrinet!Place) =
--	self.places->iterate( place ; elements : OrderedSet(petrinet!Place) = 
--		OrderedSet{} | elements.append(place)
--		)
--	;

--helper context statechart!OR def : getBasic (n: String) : statechart!Basic =
--	;
