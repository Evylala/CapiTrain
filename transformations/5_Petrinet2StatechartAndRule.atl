-- @path statechart=/CapiTrain/EMF/statechart.ecore
-- @path petrinet=/CapiTrain/EMF/petrinet.ecore

module Petrinet2Statechart;

create schartOut: statechart refining schartInput : statechart, pnetInput: petrinet;

rule Petrinet2StatechartAndRuleNext {
	from 
		h1: statechart!HyperEdge (
			thisModule.getNextAndNames().first() = h1.name
		)
	to
		h2: statechart!HyperEdge (
		),
		a: statechart!AND (
			rcontains <- if h1.rcontains.rcontains.oclIsKindOf(statechart!Compound)
				then h1.rcontains.rcontains
				else OclUndefined
				endif,
			contains <- h1.getNextCompounds()
		)
}

helper context statechart!HyperEdge def: getNextCompounds(): Sequence(statechart!Compound) =
	self.next -> collect(s | if self.rcontains.contains.size() = 1
		then s.getCompoundIn(self.rcontains.rcontains)
		else s.getCompoundIn(self.rcontains)
		endif)
	;

helper context statechart!State def: getCompoundIn(current: statechart!Compound): statechart!Compound = 
	if self.rcontains = current
	then self
	else self.rcontains.getCompoundIn(current)
	endif
	;

helper def: getNextAndNames(): Sequence(String) =
	petrinet!Transition -> allInstances() -> select(t | t.isPostpAndTransition()) 
	-> collect(t | t.name);

helper context petrinet!Transition def: isPostpAndTransition(): Boolean = 
	if self.postp.size() > 1
	then thisModule.posttEquivalents(self.name, self.postp) and thisModule.posttEquivalents(self.name, self.postp)
	else false
	endif
;
	
helper def: posttEquivalents(name: String, postp: Sequence(petrinet!Place)): Boolean = 
	postp -> iterate(p; ret: Boolean = false |
		if (postp.first().postt.size() = 1 and p.postt.size() = 1)
		then (postp.first().postt.first().name = p.postt.first().name)
		else false
		endif	
	);
	
helper def: pretEquivalents(name: String, postp: Sequence(petrinet!Place)): Boolean = 
	postp -> iterate(p; ret: Boolean = false |
		if (postp.first().pret.size() = 1 and p.pret.size() = 1)
		then (postp.first().pret.first().name = p.pret.first().name)
		else false
		endif	
	);
