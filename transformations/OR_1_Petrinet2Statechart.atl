-- @path statechart=/CapiTrain/EMF/statechart.ecore
-- @path petrinet=/CapiTrain/EMF/petrinet.ecore

module OR_1_Petrinet2Statechart;

create schartOut: statechart refining schartInput : statechart, pnetInput: petrinet;


rule Petrinet2Statechart {
	from 
		h1: statechart!HyperEdge (
				thisModule.getHyperEdgeOfFirstOr().name = h1.name
			)
	to
		h2: statechart!HyperEdge (
			rcontains <- thisModule.getHyperEdgeOfFirstOr().rnext.first().rcontains
		)
}

rule modifyBasic {
	from
		b1: statechart!Basic (
			if not thisModule.isInAnd(b1) then
				thisModule.getHyperEdgeOfFirstOr().next.first().name = b1.name
			else 
				false
			endif
		)
	to
		b2: statechart!Basic (
			rcontains <- 
			if thisModule.isInAnd(thisModule.getHyperEdgeOfFirstOr().rnext.first()) then
				thisModule.getHyperEdgeOfFirstOr().rnext.first().rcontains.rcontains.rcontains
			else
				thisModule.getHyperEdgeOfFirstOr().rnext.first().rcontains
			endif
		)
}

rule modifyAnd {
	from
		a1: statechart!AND (
			if thisModule.isInAnd(thisModule.getHyperEdgeOfFirstOr().next.first()) then
				thisModule.getHyperEdgeOfFirstOr().next.first().rcontains.rcontains.name = a1.name
			else
				false
			endif
		)
	to
		a2: statechart!AND (
			rcontains <- 
				if thisModule.isInAnd(thisModule.getHyperEdgeOfFirstOr().rnext.first()) then
					thisModule.getHyperEdgeOfFirstOr().rnext.first().rcontains.rcontains.rcontains
				else
					thisModule.getHyperEdgeOfFirstOr().rnext.first().rcontains
				endif
		)
}

--rule dropOr {
--	from 
--		o: statechart!OR (
--				o.contains.isEmpty()
--			)
--	to
--		drop
--}

helper def: getHyperEdgeOfFirstOr(): statechart!HyperEdge =
	let allHyperEdges: Sequence(statechart!HyperEdge) = statechart!HyperEdge->allInstances()->asSequence() in
		allHyperEdges->select(h | thisModule.isOr(h))->first()
;

helper def: isOr(h: statechart!HyperEdge ): Boolean =
	let transition: petrinet!Transition = petrinet!Transition->allInstances()->select(t | t.name = h.name).first() 
	in let allTransitions: Sequence(petrinet!Transition) = petrinet!Transition->allInstances()->asSequence()
	in
		if transition.oclIsUndefined() = false then
			if transition.prep->size() = 1 and transition.postp->size() = 1 then
				if thisModule.helperPrep(transition) and thisModule.helperPost(transition) then
					true
				else
					false
				endif
			else
				false
			endif
		else
			false
		endif	
;
	
helper def: helperPrep(transition: petrinet!Transition): Boolean =
	let allTransitions: Sequence(petrinet!Transition) = petrinet!Transition->allInstances()->asSequence() in
	allTransitions->iterate(t; name: petrinet!Place = transition.prep->first().name |
		if t.prep->exists(p | p.name = name) then
			false
		else
			true
		endif
	) or
	allTransitions->iterate(t; name: petrinet!Place = transition.postp->first().name |
		if t.prep->exists(p | p.name = name) then
			false
		else
			true
		endif
	)	
;
	
helper def: helperPost(transition: petrinet!Transition): Boolean =
	let allTransitions: Sequence(petrinet!Transition) = petrinet!Transition->allInstances()->asSequence() in
	allTransitions->iterate(t; name: petrinet!Place = transition.prep->first().name |
		if t.postp->exists(p | p.name = name) then
			false
		else
			true
		endif
	) or
	allTransitions->iterate(t; name: petrinet!Place = transition.postp->first().name |
		if t.postp->exists(p | p.name = name) then
			false
		else
			true
		endif
	)
;
	
helper def: isInAnd(b: statechart!Basic): Boolean =
	if b.rcontains.rcontains->oclIsTypeOf(statechart!AND) and b.rcontains.rcontains.name <> 'top' then
		true
	else
		false
	endif
;

		